import React, { useState, useImperativeHandle, forwardRef, useEffect } from 'react';
import { Box, Typography, TextField, MenuItem, Snackbar, Alert } from '@mui/material';
import FileUploadButton from '../../components/FileUploadButton';
import { infoCollApi } from '../../services/api';
import { extractFileName } from '../../services/s3Service';

const yesNoOptions = ['Yes', 'No'];

const InfoCollEmploymentHistory = forwardRef(({ clientCaseId }: { clientCaseId: number }, ref) => {
  const [formData, setFormData] = useState<{ [key: string]: any }>({});
  const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; severity: 'success' | 'error' }>({ open: false, message: '', severity: 'success' });

  useEffect(() => {
    if (clientCaseId) {
      infoCollApi.getEmploymentHistory(clientCaseId).then(res => {
        if (res && res.data) {
          setFormData(res.data);
        }
      }).catch(() => {
        // 可以加错误提示
      });
    }
  }, [clientCaseId]);

  // 通用输入处理
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  // 下拉选择处理
  const handleSelectChange = (name: string) => (e: any) => {
    setFormData(prev => ({ ...prev, [name]: e.target.value }));
  };

  // 上传文件回调
  const handleFileUrlChange = (name: string, url: string | null) => {
    setFormData(prev => ({ ...prev, [name]: url }));
  };

  // 关闭snackbar
  const handleCloseSnackbar = () => {
    setSnackbar(prev => ({ ...prev, open: false }));
  };

  // 暴露方法给父组件
  useImperativeHandle(ref, () => ({
    getFormData: () => formData,
    submit: async (clientCase: any) => {
      try {
        const data = { ...formData, clientCaseId: clientCase.clientCaseId };
        await infoCollApi.submitEmploymentHistory(data);
        setSnackbar({ open: true, message: '保存成功', severity: 'success' });
      } catch (e: any) {
        setSnackbar({ open: true, message: e?.message || '保存失败', severity: 'error' });
      }
    }
  }));

  return (
    <Box component="form" noValidate autoComplete="off">
      <Typography variant="h6" fontWeight={700} sx={{ mb: 2 }}>Employment History</Typography>
      
      {/* Respondents (autogenerated) */}
      <TextField 
        label="Respondents (autogenerated)" 
        fullWidth 
        size="small" 
        sx={{ mb: 2 }} 
        InputProps={{ readOnly: true }} 
        value="自动生成" 
      />

      {/* Employer Name */}
      <TextField
        name="employerName"
        label="Employer Name"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.employerName || ''}
        onChange={handleChange}
        required
      />

      {/* Is this your current employer? */}
      <TextField
        name="currentEmployer"
        label="Is this your current employer?"
        select
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.currentEmployer || ''}
        onChange={handleSelectChange('currentEmployer')}
        required
      >
        {yesNoOptions.map(opt => <MenuItem key={opt} value={opt}>{opt}</MenuItem>)}
      </TextField>

      {/* Employer Address */}
      <TextField
        name="employerAddress"
        label="Employer Address"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.employerAddress || ''}
        onChange={handleChange}
        required
      />

      {/* Place of Employment (if different) */}
      <TextField
        name="placeOfEmployment"
        label="Place of Employment (if different)"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.placeOfEmployment || ''}
        onChange={handleChange}
      />

      {/* Type of Business */}
      <TextField
        name="businessType"
        label="Type of Business"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.businessType || ''}
        onChange={handleChange}
        required
      />

      {/* Job Title */}
      <TextField
        name="jobTitle"
        label="Job Title"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.jobTitle || ''}
        onChange={handleChange}
        required
      />

      {/* Salary in USD */}
      <TextField
        name="salary"
        label="Salary in USD"
        type="number"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.salary || ''}
        onChange={handleChange}
        inputProps={{ step: "0.1" }}
        required
      />

      {/* Start Date */}
      <TextField
        name="startDate"
        label="Start Date"
        type="date"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        InputLabelProps={{ shrink: true }}
        value={formData.startDate || ''}
        onChange={handleChange}
        required
      />

      {/* End Date - 仅在不是当前雇主时必填 */}
      <TextField
        name="endDate"
        label="End Date"
        type="date"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        InputLabelProps={{ shrink: true }}
        value={formData.endDate || ''}
        onChange={handleChange}
        required={formData.currentEmployer === 'No'}
      />

      {/* Number of Hours Worked Per Week */}
      <TextField
        name="hoursPerWeek"
        label="Number of Hours Worked Per Week"
        type="number"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.hoursPerWeek || ''}
        onChange={handleChange}
        inputProps={{ step: "0.1" }}
        required
      />

      {/* Job Summary */}
      <TextField
        name="jobSummary"
        label="Job Summary"
        multiline
        rows={4}
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.jobSummary || ''}
        onChange={handleChange}
        required
      />

      {/* Employer Website */}
      <TextField
        name="employerWebsite"
        label="Employer Website"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.employerWebsite || ''}
        onChange={handleChange}
      />

      {/* Employment Verification Letter */}
      <FileUploadButton
        label="Upload Employment Verification Letter (PDF)"
        fileType="employmentLetter"
        onFileUrlChange={url => handleFileUrlChange('employmentLetter', url)}
        required
        fileUrl={formData.employmentLetter}
        fileName={formData.employmentLetter && extractFileName(formData.employmentLetter)}
      />

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
});

export default InfoCollEmploymentHistory; 