import React, { useState, useImperativeHandle, forwardRef, useEffect } from 'react';
import { Box, Typography, TextField, MenuItem, Snackbar, Alert, Button } from '@mui/material';
import FileUploadButton from '../../components/FileUploadButton';
import { infoCollApi } from '../../services/api';
import { extractFileName } from '../../services/s3Service';

const yesNoOptions = ['Yes', 'No'];

interface EmploymentHistory {
  id?: number;
  clientCaseId: number;
  respondents: string;
  employerName: string;
  currentEmployer: string;
  employerAddress: string;
  placeOfEmployment: string;
  businessType: string;
  jobTitle: string;
  salary: number;
  startDate: string;
  endDate: string;
  hoursPerWeek: number;
  jobSummary: string;
  employerWebsite: string;
  employmentLetter: string;
}

const InfoCollEmploymentHistory = forwardRef(({ clientCaseId }: { clientCaseId: number }, ref) => {
  const [employmentHistories, setEmploymentHistories] = useState<EmploymentHistory[]>([]);
  const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; severity: 'success' | 'error' }>({ open: false, message: '', severity: 'success' });

  useEffect(() => {
    if (clientCaseId) {
      infoCollApi.getEmploymentHistory(clientCaseId).then(res => {
        if (res && res.data && Array.isArray(res.data)) {
          setEmploymentHistories(res.data);
        }
      }).catch(() => {
        // 可以加错误提示
      });
    }
  }, [clientCaseId]);

  const handleChange = (index: number) => (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    const updatedHistories = [...employmentHistories];
    updatedHistories[index] = { ...updatedHistories[index], [name]: value };
    setEmploymentHistories(updatedHistories);
  };

  const handleSelectChange = (index: number, name: string) => (e: any) => {
    const updatedHistories = [...employmentHistories];
    updatedHistories[index] = { ...updatedHistories[index], [name]: e.target.value };
    setEmploymentHistories(updatedHistories);
  };

  const handleFileUrlChange = (index: number, name: string, url: string | null) => {
    const updatedHistories = [...employmentHistories];
    updatedHistories[index] = { ...updatedHistories[index], [name]: url };
    setEmploymentHistories(updatedHistories);
  };

  const handleAdd = () => {
    setEmploymentHistories(prev => [...prev, {
      clientCaseId,
      respondents: '',
      employerName: '',
      currentEmployer: '',
      employerAddress: '',
      placeOfEmployment: '',
      businessType: '',
      jobTitle: '',
      salary: 0,
      startDate: '',
      endDate: '',
      hoursPerWeek: 0,
      jobSummary: '',
      employerWebsite: '',
      employmentLetter: ''
    }]);
  };

  const handleDelete = (index: number) => {
    setEmploymentHistories(prev => prev.filter((_, i) => i !== index));
  };

  const handleCloseSnackbar = () => {
    setSnackbar(prev => ({ ...prev, open: false }));
  };

  useImperativeHandle(ref, () => ({
    submit: async () => {
      try {
        await infoCollApi.submitEmploymentHistory(employmentHistories);
        setSnackbar({ open: true, message: '保存成功', severity: 'success' });
      } catch (e: any) {
        setSnackbar({ open: true, message: e?.message || '保存失败', severity: 'error' });
      }
    }
  }));

  return (
    <Box>
      <Typography variant="h6" fontWeight={700} sx={{ mb: 2 }}>Employment History</Typography>

      {employmentHistories.map((history, index) => (
        <Box key={index} component="form" noValidate autoComplete="off" sx={{ mb: 4, p: 2, border: '1px solid #e0e0e0', borderRadius: 1 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="subtitle1" fontWeight={600}>Employment History {index + 1}</Typography>
            <Button
              variant="outlined"
              color="error"
              size="small"
              onClick={() => handleDelete(index)}
            >
              Delete
            </Button>
          </Box>

          <TextField 
            label="Respondents (autogenerated)" 
            fullWidth 
            size="small" 
            sx={{ mb: 2 }} 
            InputProps={{ readOnly: true }} 
            value="自动生成" 
          />

          <TextField
            name="employerName"
            label="Employer Name"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={history.employerName || ''}
            onChange={handleChange(index)}
            required
          />

          <TextField
            name="currentEmployer"
            label="Is this your current employer?"
            select
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={history.currentEmployer || ''}
            onChange={handleSelectChange(index, 'currentEmployer')}
            required
          >
            {yesNoOptions.map(opt => <MenuItem key={opt} value={opt}>{opt}</MenuItem>)}
          </TextField>

          <TextField
            name="employerAddress"
            label="Employer Address"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={history.employerAddress || ''}
            onChange={handleChange(index)}
            required
          />

          <TextField
            name="placeOfEmployment"
            label="Place of Employment (if different)"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={history.placeOfEmployment || ''}
            onChange={handleChange(index)}
          />

          <TextField
            name="businessType"
            label="Type of Business"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={history.businessType || ''}
            onChange={handleChange(index)}
            required
          />

          <TextField
            name="jobTitle"
            label="Job Title"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={history.jobTitle || ''}
            onChange={handleChange(index)}
            required
          />

          <TextField
            name="salary"
            label="Salary in USD"
            type="number"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={history.salary || ''}
            onChange={handleChange(index)}
            inputProps={{ step: "0.1" }}
            required
          />

          <TextField
            name="startDate"
            label="Start Date"
            type="date"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            InputLabelProps={{ shrink: true }}
            value={history.startDate || ''}
            onChange={handleChange(index)}
            required
          />

          <TextField
            name="endDate"
            label="End Date"
            type="date"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            InputLabelProps={{ shrink: true }}
            value={history.endDate || ''}
            onChange={handleChange(index)}
            required={history.currentEmployer === 'No'}
          />

          <TextField
            name="hoursPerWeek"
            label="Number of Hours Worked Per Week"
            type="number"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={history.hoursPerWeek || ''}
            onChange={handleChange(index)}
            inputProps={{ step: "0.1" }}
            required
          />

          <TextField
            name="jobSummary"
            label="Job Summary"
            multiline
            rows={4}
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={history.jobSummary || ''}
            onChange={handleChange(index)}
            required
          />

          <TextField
            name="employerWebsite"
            label="Employer Website"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={history.employerWebsite || ''}
            onChange={handleChange(index)}
          />

          <FileUploadButton
            label="Upload Employment Verification Letter (PDF)"
            fileType="employmentLetter"
            onFileUrlChange={url => handleFileUrlChange(index, 'employmentLetter', url)}
            required
            fileUrl={history.employmentLetter}
            fileName={history.employmentLetter && extractFileName(history.employmentLetter)}
          />
        </Box>
      ))}

      <Button
        variant="contained"
        onClick={handleAdd}
        sx={{ mb: 2 }}
      >
        Add Employment History
      </Button>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
});

export default InfoCollEmploymentHistory; 