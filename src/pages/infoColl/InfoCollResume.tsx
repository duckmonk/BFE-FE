import React, { useState, useImperativeHandle, forwardRef, useEffect } from 'react';
import { Box, Typography, TextField, Snackbar, Alert } from '@mui/material';
import FileUploadButton from '../../components/FileUploadButton';
import { infoCollApi } from '../../services/api';
import { extractFileName } from '../../services/s3Service';

const InfoCollResume = forwardRef(({ clientCaseId }: { clientCaseId: number }, ref) => {
  const [formData, setFormData] = useState<{ [key: string]: any }>({});
  const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; severity: 'success' | 'error' }>({ open: false, message: '', severity: 'success' });

  useEffect(() => {
    if (clientCaseId) {
      infoCollApi.getResume(clientCaseId).then(res => {
        if (res && res.data) {
          setFormData(res.data);
        }
      }).catch(() => {
        // 可以加错误提示
      });
    }
  }, [clientCaseId]);

  // 上传文件回调
  const handleFileUrlChange = (name: string, url: string | null) => {
    setFormData(prev => ({ ...prev, [name]: url }));
  };

  // 关闭snackbar
  const handleCloseSnackbar = () => {
    setSnackbar(prev => ({ ...prev, open: false }));
  };

  // 暴露方法给父组件
  useImperativeHandle(ref, () => ({
    getFormData: () => formData,
    submit: async (clientCase: any) => {
      try {
        const data = { ...formData, clientCaseId: clientCase.clientCaseId };
        await infoCollApi.submitResume(data);
        setSnackbar({ open: true, message: '保存成功', severity: 'success' });
      } catch (e: any) {
        setSnackbar({ open: true, message: e?.message || '保存失败', severity: 'error' });
      }
    }
  }));

  return (
    <Box component="form" noValidate autoComplete="off">
      <Typography variant="h6" fontWeight={700} sx={{ mb: 2 }}>Resume Info</Typography>
      
      {/* Respondents (autogenerated) */}
      <TextField 
        label="Respondents (autogenerated)" 
        fullWidth 
        size="small" 
        sx={{ mb: 2 }} 
        InputProps={{ readOnly: true }} 
        value="自动生成" 
      />

      {/* Resume Upload */}
      <FileUploadButton
        label="Upload Resume (PDF)"
        fileType="resume"
        onFileUrlChange={url => handleFileUrlChange('file', url)}
        required
        fileUrl={formData.file}
        fileName={formData.file && extractFileName(formData.file)}
      />

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
});

export default InfoCollResume; 