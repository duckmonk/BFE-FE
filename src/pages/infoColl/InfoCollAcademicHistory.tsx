import React, { useState, useImperativeHandle, forwardRef, useEffect } from 'react';
import { Box, Typography, TextField, MenuItem, Snackbar, Alert } from '@mui/material';
import FileUploadButton from '../../components/FileUploadButton';
import { infoCollApi } from '../../services/api';
import { extractFileName } from '../../services/s3Service';

const degreeOptions = ['Bachelor\'s', 'Master\'s', 'Doctorate', 'Other'];
const statusOptions = ['Completed', 'Ongoing', 'Other'];
const yesNoOptions = ['Yes', 'No'];
const countryOptions = ['USA', 'China', 'Canada', 'Other']; // 可根据需要扩展

const InfoCollAcademicHistory = forwardRef(({ clientCaseId }: { clientCaseId: number }, ref) => {
  const [formData, setFormData] = useState<{ [key: string]: any }>({});
  const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; severity: 'success' | 'error' }>({ open: false, message: '', severity: 'success' });

  useEffect(() => {
    if (clientCaseId) {
      infoCollApi.getAcademicHistory(clientCaseId).then(res => {
        if (res && res.data) {
          setFormData(res.data);
        }
      }).catch(() => {
        // 可以加错误提示
      });
    }
  }, [clientCaseId]);

  // 通用输入处理
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  // 下拉选择处理
  const handleSelectChange = (name: string) => (e: any) => {
    setFormData(prev => ({ ...prev, [name]: e.target.value }));
  };

  // 上传文件回调
  const handleFileUrlChange = (name: string, url: string | null) => {
    setFormData(prev => ({ ...prev, [name]: url }));
  };

  // 关闭snackbar
  const handleCloseSnackbar = () => {
    setSnackbar(prev => ({ ...prev, open: false }));
  };

  // 暴露方法给父组件
  useImperativeHandle(ref, () => ({
    getFormData: () => formData,
    submit: async (clientCase: any) => {
      try {
        const data = { ...formData, clientCaseId: clientCase.clientCaseId };
        await infoCollApi.submitAcademicHistory(data);
        setSnackbar({ open: true, message: '保存成功', severity: 'success' });
      } catch (e: any) {
        setSnackbar({ open: true, message: e?.message || '保存失败', severity: 'error' });
      }
    }
  }));

  return (
    <Box component="form" noValidate autoComplete="off">
      <Typography variant="h6" fontWeight={700} sx={{ mb: 2 }}>Academic History</Typography>
      
      {/* Respondents (autogenerated) */}
      <TextField 
        label="Respondents (autogenerated)" 
        fullWidth 
        size="small" 
        sx={{ mb: 2 }} 
        InputProps={{ readOnly: true }} 
        value="自动生成" 
      />

      {/* Degree */}
      <TextField
        name="degree"
        label="Degree"
        select
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.degree || ''}
        onChange={handleSelectChange('degree')}
        required
      >
        {degreeOptions.map(opt => <MenuItem key={opt} value={opt}>{opt}</MenuItem>)}
      </TextField>

      {/* School Name */}
      <TextField
        name="schoolName"
        label="School Name"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.schoolName || ''}
        onChange={handleChange}
        required
      />

      {/* Status */}
      <TextField
        name="status"
        label="Status"
        select
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.status || ''}
        onChange={handleSelectChange('status')}
        required
      >
        {statusOptions.map(opt => <MenuItem key={opt} value={opt}>{opt}</MenuItem>)}
      </TextField>

      {/* Start Date */}
      <TextField
        name="startDate"
        label="Start Date"
        type="date"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        InputLabelProps={{ shrink: true }}
        value={formData.startDate || ''}
        onChange={handleChange}
        required
      />

      {/* End Date - 仅在状态为 Completed 时必填 */}
      <TextField
        name="endDate"
        label="End Date"
        type="date"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        InputLabelProps={{ shrink: true }}
        value={formData.endDate || ''}
        onChange={handleChange}
        required={formData.status === 'Completed'}
      />

      {/* Major */}
      <TextField
        name="major"
        label="Major"
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.major || ''}
        onChange={handleChange}
        required
      />

      {/* Is your original document in English? */}
      <TextField
        name="docLanguage"
        label="Is your original document in English?"
        select
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.docLanguage || ''}
        onChange={handleSelectChange('docLanguage')}
        required
      >
        {yesNoOptions.map(opt => <MenuItem key={opt} value={opt}>{opt}</MenuItem>)}
      </TextField>

      {/* Copy of Transcripts - Original */}
      <FileUploadButton
        label="Upload Copy of Transcripts - Original (PDF)"
        fileType="transcriptsOriginal"
        onFileUrlChange={url => handleFileUrlChange('transcriptsOriginal', url)}
        required
        fileUrl={formData.transcriptsOriginal}
        fileName={formData.transcriptsOriginal && extractFileName(formData.transcriptsOriginal)}
      />

      {/* Copy of Transcripts - Translated */}
      {formData.docLanguage === 'No' && (
        <FileUploadButton
          label="Upload Copy of Transcripts - Translated (PDF)"
          fileType="transcriptsTranslated"
          onFileUrlChange={url => handleFileUrlChange('transcriptsTranslated', url)}
          required
          fileUrl={formData.transcriptsTranslated}
          fileName={formData.transcriptsTranslated && extractFileName(formData.transcriptsTranslated)}
        />
      )}

      {/* Copy of Diploma - Original */}
      <FileUploadButton
        label="Upload Copy of Diploma - Original (PDF)"
        fileType="diplomaOriginal"
        onFileUrlChange={url => handleFileUrlChange('diplomaOriginal', url)}
        required
        fileUrl={formData.diplomaOriginal}
        fileName={formData.diplomaOriginal && extractFileName(formData.diplomaOriginal)}
      />

      {/* Copy of Diploma - Translated */}
      {formData.docLanguage === 'No' && (
        <FileUploadButton
          label="Upload Copy of Diploma - Translated (PDF)"
          fileType="diplomaTranslated"
          onFileUrlChange={url => handleFileUrlChange('diplomaTranslated', url)}
          required
          fileUrl={formData.diplomaTranslated}
          fileName={formData.diplomaTranslated && extractFileName(formData.diplomaTranslated)}
        />
      )}

      {/* Country */}
      <TextField
        name="country"
        label="Country"
        select
        fullWidth
        size="small"
        sx={{ mb: 2 }}
        value={formData.country || ''}
        onChange={handleSelectChange('country')}
        required
      >
        {countryOptions.map(opt => <MenuItem key={opt} value={opt}>{opt}</MenuItem>)}
      </TextField>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
});

export default InfoCollAcademicHistory; 